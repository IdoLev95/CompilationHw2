%{
#include <iostream>
#include "part2_helpers.h"  // Include the helper functions
#include "parser.tab.h"     // Include the header generated by Bison

extern int line_number;     // Line number variable from Flex
void yyerror(const char* s);  // Error handling function
%}

%union {
    ParserNode* myClassVal;   // Union for MyClass (custom class) values
}

%token <myClassVal> ID
%token <myClassVal> STRING
%token IF ELSE WHILE RETURN

%type <myClassVal> expr

%%

program:
    statements
    ;

statements:
    statement
    | statements statement
    ;

statement:
    expr ';'
    ;

expr:
    ID {
        std::cout << "ID: " << $1->value << std::endl;
        $$ = $1;  // Return MyClass pointer
    }
    | STRING {
        std::cout << "STRING: " << $1->value << std::endl;
        $$ = $1;  // Return MyClass pointer
    }
    ;

%%

// Error handling function
void yyerror(const char* s) {
    std::cerr << "Parse Error: " << s << " at line " << line_number << std::endl;
}

// Main function in parser.tab.c (generated by Bison)
int main() {
    std::cout << "Enter input for parsing:" << std::endl;
    yyparse();  // Start the Bison parser
    return 0;
}
