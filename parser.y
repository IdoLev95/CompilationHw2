%{
#include <stdio.h>
#include "part2_helpers.h"    // Include helper functions
#include "parser.tab.h"       // Include the header generated by Bison

extern int line_number;       // Line number variable from Flex
extern int yylex();
void yyerror(const char* s);  // Error handling function
int yylex();  // Explicit declaration of the lexer
 ParserNode *parseTree;
%}

%union {
    ParserNode* myClassVal;   // Union for custom ParserNode* values
}

%token <myClassVal> ID STRING TYPE ReservedWord ReservedMarks IntegerNum RealNum relop addop mulop assign and or not dropLine DOTS

%type <myClassVal> program fdefs func_dec_api func_def_api

%%

// Grammar rules

program:
    fdefs {$$ = makeNode($1->type,$1->value,$1);parseTree = $$;return 0;}
    ;

fdefs:
    fdefs func_def_api dropLine  {$$ = $2;} 
    | fdefs func_dec_api {$$ = $2;}
    | /* epsilon */ {$$ = NULL;}
    ;
blk:
	/* epsilon */
	;
func_dec_api:
    TYPE ID '(' ')' ';' {printf("TYPE: %s\n", $1->value);  $1 = concatList($1,$2);$$ = makeNode($1->value,$2->value,$1);}
    ;

func_def_api:
    TYPE ID '(' ')'  {printf("TYPE: %s\n", $1->value);  $1 = concatList($1,$2);$$ = makeNode($1->value,$2->value,$1);}
    ;

%%

// Error handling function
void yyerror(const char* s) {
    fprintf(stderr, "Parse Error: %s at line %d\n", s, line_number);
}


